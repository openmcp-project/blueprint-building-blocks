---
########################################################################################################################
###! /!\ this file is only used in github pipeline to template a valid and NOT empty helm manifest! #####
########################################################################################################################
clusterSecretStores:  
  - name: "sap-hashicorp-vault-cluster-store"
    controller: "controller"
    provider:
      vault:
        server: "https://vault.tools.sap/"
        namespace: "s4/ketos"
        path: "k8s-clusters"
        version: "v2"
        auth:
          appRole:
            path: "approle"
            roleId: "cf33bb15"
            secretRef:
              name: "sap-hashicorp-vault-token"
              key: "token"
########################################################################################################################
clusterExternalSecret:
- name: "garden-ketos-co-sa-mcp-test"
  externalSecretName: "externalSecretName"
  refreshTime: "1m"            
  namespaceSelectors:
    - matchLabels:
      cool: label
  externalSecretSpec:
    secretStoreRef:
      name: secret-store-name
      kind: SecretStore
    refreshInterval: "1h"
    target:
      name: my-secret
      creationPolicy: 'Merge'
      template:
        type: kubernetes.io/dockerconfigjson
        metadata:
          annotations: {}
          labels: {}
        data:
          config.yml: |
            endpoints:
            - https://{{ .data.user }}:{{ .data.password }}@api.exmaple.com
        templateFrom:
        - configMap:
            name: alertmanager
            items:
            - key: alertmanager.yaml
    data:
      - secretKey: secret-key-to-be-managed
        remoteRef:
          key: provider-key
          version: provider-key-version
          property: provider-key-property
    dataFrom:
    - key: provider-key
      version: provider-key-version
      property: provider-key-property
########################################################################################################################
secretStores:
- name: "sap-hashicorp-vault"
  namespace: "default"
  provider:
    vault:
      server: "https://vault.tools.sap/"
      namespace: "s4/ketos"
      path: "k8s-clusters"
      version: "v2"
      auth:
        appRole:
          path: "approle"
          roleId: "cf33bb15"
          secretRef:
            name: "sap-hashicorp-vault-token"
            key: "token"
########################################################################################################################
externalSecret:
  - name: "garden-ketos-co-sa-mcp-test"
    namespace: "default"
    refreshInterval: "15m"
    targetSecretName: garden-ketos-co-sa-mcp-test
    secretStore:
      name: "sap-hashicorp-vault"
    data:
      - secretKey: kubeconfig
        remoteRef:
          key: "j4azdf.laasds.shoot.live.k8s-hana.ondemand.com/garden-ketos-co-sa-mcp-test"
          property: kubeconfig
  - name: "garden-ketos-co-sa-mcp-test-2"
    namespace: "default"
    refreshInterval: "15m"
    targetSecretName: garden-ketos-co-sa-mcp-test-2
    secretStore:
      name: "sap-hashicorp-vault"
    data:
      - secretKey: kubeconfig
        remoteRef:
          key: "j4azdf.laasds.shoot.live.k8s-hana.ondemand.com/garden-ketos-co-sa-mcp-test"
          property: kubeconfig
  - name: "btp-account-ketos-kita-test"
    namespace: "default"
    refreshInterval: "15m"
    targetSecretName: btp-account-ketos-kita-test
    secretStore:
      name: "sap-hashicorp-vault-cluster-store"
      kind: "ClusterSecretStore"
    data:
      - secretKey: btp-cis-provider-credentials
        remoteRef:
          key: "j4azdf.laasds.shoot.live.k8s-hana.ondemand.com/btp-accounts-ketos-kita-test"
          property: btp-cis-provider-credentials
      - secretKey: btp-service-account-provider-credentials
        remoteRef:
          key: "j4azdf.laasds.shoot.live.k8s-hana.ondemand.com/btp-accounts-ketos-kita-test"
          property: btp-service-account-provider-credentials
########################################################################################################################
pushSecrets:
  - name: "garden-ketos-co-sa-mcp-test"
    namespace: "default"
    spec:
      updatePolicy: Replace # Policy to overwrite existing secrets in the provider on sync
      deletionPolicy: Delete # the provider' secret will be deleted if the PushSecret is deleted
      refreshInterval: 1h # Refresh interval for which push secret will reconcile
      secretStoreRefs: # A list of secret stores to push secrets to
        - name: aws-parameterstore
          kind: SecretStore
      selector:
        secret:
          name: pokedex-credentials # Source Kubernetes secret to be pushed
        # Alternatively, you can point to a generator that produces values to be pushed
        generatorRef:
          apiVersion: external-secrets.io/v1alpha1
          kind: ECRAuthorizationToken
          name: prod-registry-credentials
      template:
        metadata:
          annotations: { }
          labels: { }
        data:
          best-pokemon: "{{ .best-pokemon | toString | upper }} is the really best!"
        # Uses an existing template from configmap
        # Secret is fetched, merged and templated within the referenced configMap data
        # It does not update the configmap, it creates a secret with: data["alertmanager.yml"] = ...result...
        templateFrom:
          - configMap:
              name: application-config-tmpl
              items:
                - key: config.yml
      data:
        - conversionStrategy: None # Also supports the ReverseUnicode strategy
          match:
            secretKey: best-pokemon # Source Kubernetes secret key to be pushed
            remoteRef:
              remoteKey: my-first-parameter # Remote reference (where the secret 
########################################################################################################################